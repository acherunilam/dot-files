#!/usr/bin/env bash

################################################################################
# Global variables.
################################################################################

_NAME="$(command basename "$0")"
CURL_ARGS="--connect-timeout 2 --max-time 5"
HELP_DOC="Upload text to @mkaczanowski's Pastebin, a self-hosted pastebin. If no
input is passed, then the contents of the clipboard will be used.

Usage:
  $_NAME [options]
  cat <message.txt> | $_NAME [options]

Options:
  -b	Burn the paste after it's opened once.
  -h	Print help.

Environment variables:
  PASTEBIN_AUTH_BASIC
  PASTEBIN_URL"
SKIP_HTTP_PREFIX='true'

################################################################################
# Helper methods.
################################################################################

# Usage:
#       error <message> [<exit_code>]
error() {
	[[ $2 -eq 0 ]] && std_err_or_out=1 || std_err_or_out=2
	builtin echo "$_NAME: $1" >&"$std_err_or_out"
	exit "${2:-1}"
}

# Usage:
#       echo "text message" | pbcopy
pbcopy() {
	content="$(</dev/stdin)"
	if [[ "$OSTYPE" == "darwin"* ]]; then
		builtin echo -n "$content" | command pbcopy
		return
	fi
	output="$(builtin printf '\e]52;c;%s\a' "$(builtin echo -n "$content" | command base64 -w0)")"
	# shellcheck disable=SC1003
	[[ -n "$TMUX" ]] && output="$(builtin printf '\ePtmux;\e%s\e\\' "$output")"
	builtin printf "%s" "$output"
}

################################################################################
# Validate input.
################################################################################

while getopts ":bh" arg; do
	case $arg in
	b) # burn
		curl_query="?burn=true"
		;;
	h) # help
		builtin echo "$HELP_DOC" && exit
		;;
	*)
		builtin echo "$HELP_DOC" >&2 && exit 64 # EX_USAGE
		;;
	esac
done
shift $((OPTIND - 1))
[[ "${!#}" == "-b" ]] && curl_query="?burn=true" && set -- "${@:1:$#-1}"

[[ -z "$PASTEBIN_URL" ]] && error "missing environment variable, please set PASTEBIN_URL" 78 # EX_CONFIG
if [[ -p /dev/stdin ]]; then
	content="$(</dev/stdin)"
elif [[ "$OSTYPE" == "darwin"* ]]; then
	content="$(command pbpaste)"
fi
[[ -z "$content" ]] && error "missing input, please pass the text via STDIN" 64 # EX_USAGE

################################################################################
# Execute.
################################################################################

[[ -n $PASTEBIN_AUTH_BASIC ]] && curl_auth_arg="-u $PASTEBIN_AUTH_BASIC"
# shellcheck disable=SC2086
response="$(
	command curl -qsS $CURL_ARGS -XPOST $curl_auth_arg --data-binary @- \
		"${PASTEBIN_URL%/}$curl_query" <<<"$content" ||
		error "unable to reach $PASTEBIN_URL"
)"
[[ -z "$response" ]] && error "unknown error, missing repsonse"
[[ -n "$SKIP_HTTP_PREFIX" ]] && response="$(command sed -E 's|https?://||g' <<<"$response")"
echo "$response"
echo -n "$response" | pbcopy
