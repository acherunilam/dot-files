#!/usr/bin/env bash

################################################################################
# Global variables.
################################################################################

_NAME="$(command basename "$0")"
CURL_ARGS="--connect-timeout 2 --max-time 30"
DIG_ARGS=""
HELP_DOC="Print the AS details of an IP or ASN.

Usage:
  $_NAME <ip_address>
  $_NAME <as_number> [-g]
  $_NAME <as_number> [-p]...
  $_NAME -h

Options:
  -g    List all ASNs belonging to the ASN's ISP.
  -p    List all prefixes for the ASN. Use twice to aggregate.
  -h    Print help.

Environment Variables:
  PEERINGDB_API_KEY	https://docs.peeringdb.com/howto/api_keys"

################################################################################
# Helper methods.
################################################################################

# Usage:
#       check_if_installed <binary>
check_if_installed() {
	builtin hash "$1" 2>/dev/null || error "please install '$1' ($2)" 69 # EX_UNAVAILABLE
}

# Usage:
#       error <message> [<exit_code>]
error() {
	[[ $2 -eq 0 ]] && std_err_or_out=1 || std_err_or_out=2
	builtin echo "$_NAME: $1" >&"$std_err_or_out"
	exit "${2:-1}"
}

# Usage:
#       query_cymru <domain>
# shellcheck disable=SC2086
query_cymru() {
	command dig +short $DIG_ARGS TXT "$1" | command sed -E 's/"//g'
}

# Usage:
#       query_cymru_and_append_asn_info <ip_reversed> <domain>
query_cymru_and_append_asn_info() {
	# Longest prefix matching in case IP is reachable through multiple prefixes.
	ip_info="$(query_cymru "$1.$2" | command sort -V | command tail -n1)"
	[[ -z "$ip_info" ]] && exit 1
	asn=$(command awk '{print $1}' <<<"$ip_info")
	asn_info="$(
		query_cymru "AS$asn.asn.cymru.com" | command awk -F'|' '{print $5}'
	)"
	builtin echo "$ip_info |$asn_info"
}

# Usage:
#		query_peeringdb <api_endpoint> <jq_op>
# shellcheck disable=SC2086
query_peeringdb() {
	output="$(
		command curl -qsS $CURL_ARGS -H "Authorization: Api-Key $PEERINGDB_API_KEY" \
			"https://www.peeringdb.com/api/${1#/}"
	)"
	err_status="$(command jq -r '.meta.error // empty' <<<"$output")"
	[[ -n "$err_status" ]] && builtin echo "[PeeringDB] $err_status" && exit 1
	command jq -r ".${2#.} // empty" <<<"$output"
}

################################################################################
# Validate input.
################################################################################

set -o pipefail
all_prefixes=0
as_group=0
while getopts ":gph" arg; do
	case $arg in
	g) # group
		as_group=1
		;;
	p) # prefixes
		all_prefixes=$((all_prefixes + 1))
		;;
	h) # help
		builtin echo "$HELP_DOC" && exit
		;;
	*)
		builtin echo "$HELP_DOC" >&2 && exit 64 # EX_USAGE
		;;
	esac
done
shift $((OPTIND - 1))
[[ "${!#}" == "-g" ]] && as_group=1 && set -- "${@:1:$#-1}"
[[ "${!#}" == "-p" ]] && all_prefixes=$((all_prefixes + 1)) && set -- "${@:1:$#-1}"
[[ "${!#}" == "-pp" ]] && all_prefixes=2 && set -- "${@:1:$#-1}"

[[ $# -eq 0 ]] && error "missing input, please pass an IP or ASN" 64             # EX_USAGE
[[ $# -gt 1 ]] && error "invalid input, do not pass more than one IP address" 64 # EX_USAGE
# If a prefix is passed, only the first IP is considered.
input="$(command sed -E 's/\/[0-9]+$//g' <<<"${1,,}")"

################################################################################
# Execute.
################################################################################

if [[ $input =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then # IPv4
	reversed_ip="$(
		builtin echo "$input" |
			command tr '.' '\n' |
			command tac |
			command tr '\n' '.' |
			command sed 's/\.$//g'
	)"
	query_cymru_and_append_asn_info "$reversed_ip" origin.asn.cymru.com
elif [[ $input =~ :[0-9a-f:]+ ]]; then # IPv6
	hextets=$(
		builtin echo "$input" |
			command sed 's/::/:/g;s/:/\n/g;/^$/d' |
			command wc -l
	)
	[[ $hextets -eq 8 ]] && extra_zeros="" || extra_zeros="$(
		command yes "0:" |
			command head -n $((8 - hextets)) |
			command tr -d '\n'
	)"
	exploded_ip="$(command sed -E "s/::/:$extra_zeros/g;s/^://g;s/:$//g" <<<"$input")"
	reversed_ip="$(
		builtin echo "$exploded_ip" |
			command tr ':' '\n' |
			while read -r line; do printf "%04x\n" "0x$line" 2>/dev/null; done |
			command tac |
			command rev |
			command sed -E 's/./&\./g' |
			command tr -d '\n' |
			command sed -E 's/\.$//g'
	)"
	query_cymru_and_append_asn_info "$reversed_ip" origin6.asn.cymru.com
elif [[ $input =~ ^(asn?)?[0-9]+$ ]]; then # ASN
	asn="$(builtin echo "$input" | command sed -E 's/^asn?//g')"
	if [[ $all_prefixes -gt 0 ]]; then
		check_if_installed "jq" "https://github.com/stedolan/jq"
		# Use RIPEstat Data API (https://stat.ripe.net/docs/02.data-api) to fetch prefixes
		# seen by at least 10 RIS peers over the last 2 weeks.
		# shellcheck disable=SC2086
		output="$(
			command curl -qsS $CURL_ARGS \
				"https://stat.ripe.net/data/announced-prefixes/data.json?resource=AS$asn" |
				command jq -r '.data.prefixes[].prefix' |
				command sort -V
		)" || error "unable to reach stat.ripe.net"
		if [[ -n "$output" ]] && [[ $all_prefixes -gt 1 ]]; then
			check_if_installed "netmask" "https://github.com/tlby/netmask"
			# shellcheck disable=SC2046
			output="$(echo "$output" | command netmask -f - | command sed -E 's/^\s+//g')"
		fi
		output="$(
			builtin echo "$output" |
				command column -tR1 -s'/' |
				command sed -E 's/([0-9a-f.:]+)\s+([0-9]+)/\1\/\2/g'
		)"
	elif [[ $as_group -eq 1 ]]; then
		[[ -z "$PEERINGDB_API_KEY" ]] && error "missing environment variable, please set PEERINGDB_API_KEY" 78 # EX_CONFIG
		asn_org="$(query_peeringdb "/org?asn=$asn" ".data[0].id")" || error "$asn_org"
		[[ -z "$asn_org" ]] && exit
		output="$(query_peeringdb "/net?org=$asn_org" ".data[].asn" | command sort -n)" || error "$output"
		[[ "$output" == "$asn" ]] && exit
		[[ -t 1 ]] && color="always" || color="never"
		command grep -E --color="$color" "^$asn$|$" <<<"$output"
		exit
	else
		output="$(query_cymru "AS$asn.asn.cymru.com")"
	fi
	[[ -n "$output" ]] && builtin echo "$output"
else
	error "invalid input, please pass an IP or ASN" 65 # EX_DATAERR
fi
